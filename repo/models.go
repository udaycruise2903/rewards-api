// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package repo

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type OrderStatus string

const (
	OrderStatusPending OrderStatus = "pending"
	OrderStatusSuccess OrderStatus = "success"
	OrderStatusFailed  OrderStatus = "failed"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus
	Valid       bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.OrderStatus, nil
}

type ScStatus string

const (
	ScStatusClaimed   ScStatus = "claimed"
	ScStatusAvailable ScStatus = "available"
)

func (e *ScStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ScStatus(s)
	case string:
		*e = ScStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ScStatus: %T", src)
	}
	return nil
}

type NullScStatus struct {
	ScStatus ScStatus
	Valid    bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullScStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ScStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ScStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullScStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.ScStatus, nil
}

type TypeOfReward string

const (
	TypeOfRewardType1 TypeOfReward = "type1"
	TypeOfRewardType2 TypeOfReward = "type2"
	TypeOfRewardType3 TypeOfReward = "type3"
)

func (e *TypeOfReward) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TypeOfReward(s)
	case string:
		*e = TypeOfReward(s)
	default:
		return fmt.Errorf("unsupported scan type for TypeOfReward: %T", src)
	}
	return nil
}

type NullTypeOfReward struct {
	TypeOfReward TypeOfReward
	Valid        bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTypeOfReward) Scan(value interface{}) error {
	if value == nil {
		ns.TypeOfReward, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TypeOfReward.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTypeOfReward) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.TypeOfReward, nil
}

type RewardPayout struct {
	ID            int64
	OrderID       uuid.UUID
	StatusOfOrder NullOrderStatus
	Reward        NullTypeOfReward
}

type UserScratchcard struct {
	ID     int64
	ScID   uuid.UUID
	UserID string
	Status NullScStatus
}
